From 5269fcd01e1b4ca02cdc9308e3b1f429a07b358e Mon Sep 17 00:00:00 2001
From: "Vohra, GauravX" <gauravx.vohra@intel.com>
Date: Tue, 28 Aug 2018 17:11:04 +0800
Subject: [PATCH 099/102] ASoC: Intel: Skylake: Fixed issue with aplay multiple
 wav files

---
 include/sound/hdaudio_ext.h            |   6 ++
 sound/soc/intel/skylake/skl-pcm.c      | 115 +++++++++++++++++++--------------
 sound/soc/intel/skylake/skl-topology.c |  21 +-----
 sound/soc/intel/skylake/skl-topology.h |   4 --
 4 files changed, 72 insertions(+), 74 deletions(-)

diff --git a/include/sound/hdaudio_ext.h b/include/sound/hdaudio_ext.h
index 7b1558e..ade1b9f 100644
--- a/include/sound/hdaudio_ext.h
+++ b/include/sound/hdaudio_ext.h
@@ -18,6 +18,12 @@ struct hdac_ext_bus {
 	int num_streams;
 	int idx;
 
+	void __iomem *ppcap;
+	void __iomem *spbcap;
+	void __iomem *mlcap;
+	void __iomem *gtscap;
+	void __iomem *drsmcap;
+
 	struct list_head hlink_list;
 
 	struct mutex lock;
diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 875b040..9018875 100755
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -177,48 +177,7 @@ static void skl_set_suspend_active(struct snd_pcm_substream *substream,
 		skl->supend_active--;
 }
 
-int skl_pcm_host_dma_prepare(struct device *dev, struct skl_pipe_params *params)
-{
-	struct hdac_ext_bus *ebus = dev_get_drvdata(dev);
-	struct hdac_bus *bus = ebus_to_hbus(ebus);
-	unsigned int format_val;
-	struct hdac_stream *hstream;
-	struct hdac_ext_stream *stream;
-	struct snd_pcm_runtime *runtime;
-	int err;
-
-	hstream = snd_hdac_get_stream(bus, params->stream,
-					params->host_dma_id + 1);
-	if (!hstream)
-		return -EINVAL;
-
-	stream = stream_to_hdac_ext_stream(hstream);
-	snd_hdac_ext_stream_decouple(ebus, stream, true);
-
-	format_val = snd_hdac_calc_stream_format(params->s_freq,
-			params->ch, params->format, params->host_bps, 0);
-
-	dev_dbg(dev, "format_val=%d, rate=%d, ch=%d, format=%d\n",
-		format_val, params->s_freq, params->ch, params->format);
-
-	snd_hdac_stream_reset(hdac_stream(stream));
-	err = snd_hdac_stream_set_params(hdac_stream(stream), format_val);
-	if (err < 0)
-		return err;
-
-	err = snd_hdac_stream_setup(hdac_stream(stream));
-	if (err < 0)
-		return err;
-
-	runtime = hdac_stream(stream)->substream->runtime;
-	/* enable SPIB if no_rewinds flag is set */
-	if (runtime->no_rewinds)
-		snd_hdac_ext_stream_spbcap_enable(ebus, 1, hstream->index);
-
-	hdac_stream(stream)->prepared = 1;
 
-	return 0;
-}
 
 int skl_pcm_link_dma_prepare(struct device *dev, struct skl_pipe_params *params)
 {
@@ -313,17 +272,52 @@ static int skl_pcm_open(struct snd_pcm_substream *substream,
 	return 0;
 }
 
+static int skl_get_format(struct snd_pcm_substream *substream,
+		struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = snd_pcm_substream_chip(substream);
+	struct skl_dma_params *dma_params;
+	struct hdac_ext_bus *ebus = dev_get_drvdata(dai->dev);
+	int format_val = 0;
+
+	if (ebus->ppcap) {
+		struct snd_pcm_runtime *runtime = substream->runtime;
+
+		format_val = snd_hdac_calc_stream_format(runtime->rate,
+						runtime->channels,
+						runtime->format,
+						32, 0);
+	} else {
+		struct snd_soc_dai *codec_dai = rtd->codec_dai;
+
+		dma_params = snd_soc_dai_get_dma_data(codec_dai, substream);
+		if (dma_params)
+			format_val = dma_params->format;
+	}
+
+	return format_val;
+}
+
 static int skl_pcm_prepare(struct snd_pcm_substream *substream,
 		struct snd_soc_dai *dai)
 {
+	struct hdac_ext_bus *ebus = dev_get_drvdata(dai->dev);
+	struct hdac_ext_stream *stream = get_hdac_ext_stream(substream);
+	struct hdac_stream *hstream = hdac_stream(stream);
+	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct skl *skl = get_skl_ctx(dai->dev);
+	unsigned int format_val;
+	int err;
 	struct skl_module_cfg *mconfig;
-	int ret;
 
 	dev_dbg(dai->dev, "%s: %s\n", __func__, dai->name);
 
 	mconfig = skl_tplg_fe_get_cpr_module(dai, substream->stream);
 
+	format_val = skl_get_format(substream, dai);
+	dev_dbg(dai->dev, "stream_tag=%d formatvalue=%d\n",
+				hdac_stream(stream)->stream_tag, format_val);
+
 	/*
 	 * In case of XRUN recovery or in the case when the application
 	 * calls prepare another time, reset the FW pipe to clean state
@@ -331,16 +325,37 @@ static int skl_pcm_prepare(struct snd_pcm_substream *substream,
 	if (mconfig &&
 		((substream->runtime->status->state == SNDRV_PCM_STATE_XRUN) ||
 		(mconfig->pipe->state == SKL_PIPE_CREATED) ||
-		(mconfig->pipe->state == SKL_PIPE_PAUSED))) {
+		(mconfig->pipe->state == SKL_PIPE_PAUSED)))
+			skl_reset_pipe(skl->skl_sst, mconfig->pipe);
 
-		skl_reset_pipe(skl->skl_sst, mconfig->pipe);
-		ret = skl_pcm_host_dma_prepare(dai->dev,
-					mconfig->pipe->p_params);
-		if (ret < 0)
-			return ret;
-	}
+	snd_hdac_stream_reset(hdac_stream(stream));
 
-	return 0;
+	err = snd_hdac_stream_set_params(hdac_stream(stream), format_val);
+	if (err < 0)
+		return err;
+
+	/*
+	 * Hardware WA valid for upto C Steppings of BXT-P -
+	 * Before writing to Format Register, put the controller in
+	 * coupled mode. Once done, put it back to de-coupled mode.
+	 * This WA is needed to avoid the DMA roll-over even before
+	 * the DSP consumes the data from the buffer
+	 */
+	snd_hdac_ext_stream_decouple(ebus, stream, false);
+	err = snd_hdac_stream_setup(hdac_stream(stream));
+	snd_hdac_ext_stream_decouple(ebus, stream, true);
+
+	if (err < 0)
+		return err;
+
+	/* enable SPIB if no_rewinds flag is set */
+	if (runtime->no_rewinds)
+		snd_hdac_ext_stream_spbcap_enable(ebus, 1, hstream->index);
+
+	hdac_stream(stream)->prepared = 1;
+	dev_dbg(dai->dev, " DEBUG EXIT prepared set to 1%s: %s\n", __func__, dai->name);
+
+	return err;
 }
 
 static int skl_pcm_hw_params(struct snd_pcm_substream *substream,
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 6c457c8..b4a867b 100755
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -1005,20 +1005,6 @@ static int skl_tplg_set_module_init_data(struct snd_soc_dapm_widget *w)
 	return 0;
 }
 
-static int skl_tplg_module_prepare(struct skl_sst *ctx, struct skl_pipe *pipe,
-		struct snd_soc_dapm_widget *w, struct skl_module_cfg *mcfg)
-{
-	switch (mcfg->dev_type) {
-	case SKL_DEVICE_HDAHOST:
-		return skl_pcm_host_dma_prepare(ctx->dev, pipe->p_params);
-
-	case SKL_DEVICE_HDALINK:
-		return skl_pcm_link_dma_prepare(ctx->dev, pipe->p_params);
-	}
-
-	return 0;
-}
-
 /*
  * Inside a pipe instance, we can have various modules. These modules need
  * to instantiated in DSP by invoking INIT_MODULE IPC, which is achieved by
@@ -1064,11 +1050,6 @@ static int skl_tplg_module_prepare(struct skl_sst *ctx, struct skl_pipe *pipe,
 			mconfig->m_state = SKL_MODULE_LOADED;
 		}
 
-		/* prepare the DMA if the module is gateway cpr */
-		ret = skl_tplg_module_prepare(ctx, pipe, w, mconfig);
-		if (ret < 0)
-			return ret;
-
 		/* update blob if blob is null for be with default value */
 		skl_tplg_update_be_blob(w, ctx);
 
@@ -2513,7 +2494,7 @@ static void skl_tplg_fill_dma_id(struct skl_module_cfg *mcfg,
 static int skl_probe_set_tlv_ext(struct snd_kcontrol *kcontrol)
 {
 	struct snd_soc_dapm_context *dapm =
-			snd_soc_dapm_kcontrol_dapm(kcontrol);
+		snd_soc_dapm_kcontrol_dapm(kcontrol);
 	struct snd_soc_dapm_widget *w = snd_soc_dapm_kcontrol_widget(kcontrol);
 	struct skl_module_cfg *mconfig = w->priv;
 	struct soc_bytes_ext *sb = (void *) kcontrol->private_value;
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 7f1ede7..1f20358 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -619,10 +619,6 @@ struct skl_module_cfg *skl_tplg_be_get_cpr_module(struct snd_soc_dai *dai,
 int is_skl_dsp_widget_type(struct snd_soc_dapm_widget *w, struct device *dev);
 
 enum skl_bitdepth skl_get_bit_depth(int params);
-int skl_pcm_host_dma_prepare(struct device *dev,
-			struct skl_pipe_params *params);
-int skl_pcm_link_dma_prepare(struct device *dev,
-			struct skl_pipe_params *params);
 int skl_tplg_dsp_log_get(struct snd_kcontrol *kcontrol,
 			 struct snd_ctl_elem_value *ucontrol);
 int skl_tplg_dsp_log_set(struct snd_kcontrol *kcontrol,
-- 
1.9.1

