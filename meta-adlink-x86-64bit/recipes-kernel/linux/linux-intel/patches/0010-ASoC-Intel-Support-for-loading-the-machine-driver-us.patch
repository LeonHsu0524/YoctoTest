From b5f95c043178c1ce9e2fab3552b66653db8fbe88 Mon Sep 17 00:00:00 2001
From: Mousumi Jana <mousumix.jana@intel.com>
Date: Fri, 11 Dec 2015 00:01:50 +0530
Subject: [PATCH 10/31] ASoC: Intel: Support for loading the machine driver
 using module parameter

Added support for loading the machine driver for RSE and HU using
module parameter.For loading the RSE or HU machine driver
"bxt_ivi_rse_i2s" or "bxt_ivi_hu_i2s" parameter should be
passed as a module parameter.

Change-Id: Icc948a9dfdf24d9b1f305fb0f9d784e077566102
Signed-off-by: Mousumi Jana <mousumix.jana@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/7818
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Babu, Ramesh <ramesh.babu@intel.com>

Conflicts:
	sound/soc/intel/skylake/skl.c
---
 sound/soc/intel/skylake/skl.c | 34 ++++++++++++++++++++++++++++------
 1 file changed, 28 insertions(+), 6 deletions(-)

diff --git a/sound/soc/intel/skylake/skl.c b/sound/soc/intel/skylake/skl.c
index e2a13d4..b1dcc6d 100644
--- a/sound/soc/intel/skylake/skl.c
+++ b/sound/soc/intel/skylake/skl.c
@@ -40,7 +40,17 @@
 
 static struct skl_machine_pdata skl_dmic_data;
 
+static char *machine = NULL;
+static char *fw_filename = NULL;
+
+module_param(machine, charp, 0444);
+MODULE_PARM_DESC(machine, "machine driver string for Intel soundcard.");
+
+module_param(fw_filename, charp, 0444);
+MODULE_PARM_DESC(fw_filename, "firmware filename string for Intel DSP.");
+
 /*
+
  * initialize the PCI registers
  */
 static void skl_update_pci_byte(struct pci_dev *pci, unsigned int reg,
@@ -516,14 +526,24 @@ static int skl_find_machine(struct skl *skl, void *driver_data)
 	    IS_ENABLED(CONFIG_SND_SOC_INTEL_CNL_FPGA))
 		goto out;
 
-	mach = snd_soc_acpi_find_machine(mach);
-	if (mach == NULL) {
-		dev_err(bus->dev, "No matching machine driver found\n");
-		return -ENODEV;
+	if (machine) {
+		mach = kzalloc(sizeof(*mach), GFP_KERNEL);
+		if (!mach)
+			return -ENOMEM;
+		mach->drv_name = machine;
+		if (fw_filename)
+			mach->fw_filename = fw_filename;
+	} else {
+		mach = driver_data;
+		mach = snd_soc_acpi_find_machine(mach);
+		if (mach == NULL) {
+			dev_err(bus->dev, "No matching machine driver found\n");
+			return -ENODEV;
+		}
+
 	}
 
 out:
-
 	skl->fw_name = mach->fw_filename;
 	skl->mach = mach;
 	if (mach->pdata) {
@@ -540,7 +560,6 @@ static int skl_machine_device_register(struct skl *skl)
 	struct snd_soc_acpi_mach *mach = skl->mach;
 	struct platform_device *pdev;
 	int ret;
-
 	pdev = platform_device_alloc(mach->drv_name, -1);
 	if (pdev == NULL) {
 		dev_err(bus->dev, "platform device alloc failed\n");
@@ -559,6 +578,9 @@ static int skl_machine_device_register(struct skl *skl)
 
 	skl->i2s_dev = pdev;
 
+	if (machine)
+		kfree(mach);
+
 	return 0;
 }
 
-- 
1.9.1

