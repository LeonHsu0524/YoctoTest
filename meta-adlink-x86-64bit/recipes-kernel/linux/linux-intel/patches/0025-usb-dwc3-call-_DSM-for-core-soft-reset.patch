From d6b1506da6abda41ba3659b6fdb20b3e6c7ba37a Mon Sep 17 00:00:00 2001
From: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
Date: Wed, 11 Jan 2017 14:15:31 +0800
Subject: [PATCH 25/42] usb: dwc3: call _DSM for core soft reset

The issue is, if core soft reset is issued while Intel Apollo Lake USB mux
is in Host role mode, it takes close to 7 minutes before we are able to
switch USB mux from Host mode to Device mode. This is due to RTL bug.

The workaround is to let BIOS issues the core soft reset via _DSM method.
It will ensure that USB mux is in Device role mode before issuing core
soft reset, and will inform the driver whether the reset is success within
the timeout value, or the timeout is exceeded.

Signed-off-by: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
---
 drivers/usb/dwc3/core.c     | 38 ++++++++++++++++++++++++++++++++++++++
 drivers/usb/dwc3/core.h     |  2 ++
 drivers/usb/dwc3/dwc3-pci.c | 14 +++++++++++++-
 3 files changed, 53 insertions(+), 1 deletion(-)

diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index dca78bb..402a6c7 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -207,6 +207,36 @@ u32 dwc3_core_fifo_space(struct dwc3_ep *dep, u8 type)
 }
 
 /**
+ * WORKAROUND: We let BIOS issues the core soft reset to Device
+ * controller for Intel Apollo Lake, via _DSM method.
+ *
+ * The issue is, if core soft reset is issued while Intel Apollo Lake
+ * USB mux is in Host role mode, it takes close to 7 minutes before
+ * we are able to switch USB mux from Host mode to Device mode.
+ */
+static int dwc3_pci_dsm_soft_reset(struct device *dev)
+{
+	guid_t			guid;
+	int			ret = -ETIMEDOUT;
+	union acpi_object	*obj;
+
+	guid_parse("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511", &guid);
+
+	obj = acpi_evaluate_dsm(ACPI_HANDLE(dev), &guid, 1, 6, NULL);
+	if (!obj) {
+		dev_err(dev, "failed to evaluate _DSM\n");
+		return -EIO;
+	}
+
+	if (obj->type == ACPI_TYPE_INTEGER)
+		ret = (obj->integer.value == 0) ? 0 : -ETIMEDOUT;
+	dev_dbg(dev, "dwc3_pci_dsm_soft_reset() ret= %d\n", ret);
+
+	ACPI_FREE(obj);
+	return ret;
+}
+
+/**
  * dwc3_core_soft_reset - Issues core soft reset and PHY reset
  * @dwc: pointer to our context structure
  */
@@ -236,6 +266,11 @@ static int dwc3_core_soft_reset(struct dwc3 *dwc)
 	if (dwc->dr_mode == USB_DR_MODE_HOST)
 		return 0;
 
+	if (dwc->has_dsm_for_softreset) {
+		dev_dbg(dwc->dev, "calling dwc3_pci_dsm_soft_reset()");
+		return dwc3_pci_dsm_soft_reset(dwc->dev);
+	}
+
 	reg = dwc3_readl(dwc->regs, DWC3_DCTL);
 	reg |= DWC3_DCTL_CSFTRST;
 	dwc3_writel(dwc->regs, DWC3_DCTL, reg);
@@ -1089,6 +1124,9 @@ static void dwc3_get_properties(struct dwc3 *dwc)
 	device_property_read_u32(dev, "snps,quirk-frame-length-adjustment",
 				 &dwc->fladj);
 
+	dwc->has_dsm_for_softreset = device_property_read_bool(dev,
+				"has_dsm_for_softreset");
+
 	dwc->lpm_nyet_threshold = lpm_nyet_threshold;
 	dwc->tx_de_emphasis = tx_de_emphasis;
 
diff --git a/drivers/usb/dwc3/core.h b/drivers/usb/dwc3/core.h
index b782ba5..25f24fc 100644
--- a/drivers/usb/dwc3/core.h
+++ b/drivers/usb/dwc3/core.h
@@ -869,6 +869,7 @@ struct dwc3_scratchpad_array {
  * 	3	- Reserved
  * @imod_interval: set the interrupt moderation interval in 250ns
  *                 increments or 0 to disable.
+ * @has_dsm_for_softreset: set if we want to use BIOS to do core soft reset
  */
 struct dwc3 {
 	struct work_struct	drd_work;
@@ -1021,6 +1022,7 @@ struct dwc3 {
 	unsigned		tx_de_emphasis:2;
 
 	u16			imod_interval;
+	unsigned		has_dsm_for_softreset:1;
 };
 
 #define work_to_dwc(w)		(container_of((w), struct dwc3, drd_work))
diff --git a/drivers/usb/dwc3/dwc3-pci.c b/drivers/usb/dwc3/dwc3-pci.c
index bc5e91d..f7bbf67 100644
--- a/drivers/usb/dwc3/dwc3-pci.c
+++ b/drivers/usb/dwc3/dwc3-pci.c
@@ -119,7 +119,19 @@ static int dwc3_pci_quirks(struct dwc3_pci *dwc)
 			return ret;
 
 		if (pdev->device == PCI_DEVICE_ID_INTEL_BXT ||
-				pdev->device == PCI_DEVICE_ID_INTEL_BXT_M) {
+		    pdev->device == PCI_DEVICE_ID_INTEL_BXT_M ||
+		    pdev->device == PCI_DEVICE_ID_INTEL_APL) {
+			struct property_entry properties[] = {
+				PROPERTY_ENTRY_STRING("dr_mode", "peripheral"),
+				PROPERTY_ENTRY_BOOL("linux,sysdev_is_parent"),
+				PROPERTY_ENTRY_BOOL("has_dsm_for_softreset"),
+				{ }
+			};
+
+			ret = platform_device_add_properties(dwc3, properties);
+			if (ret < 0)
+				return ret;
+
 			guid_parse(PCI_INTEL_BXT_DSM_GUID, &dwc->guid);
 			dwc->has_dsm_for_pm = true;
 		}
-- 
1.9.1

