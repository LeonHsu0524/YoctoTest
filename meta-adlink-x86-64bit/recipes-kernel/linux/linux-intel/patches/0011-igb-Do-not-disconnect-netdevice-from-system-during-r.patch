From 39af617abe56cc9e6f4d188d65965bbe07d840ed Mon Sep 17 00:00:00 2001
From: Jayasankar <jayasankarx.nara@intel.com>
Date: Tue, 15 Nov 2016 17:24:10 +0800
Subject: [PATCH 11/41] igb: Do not disconnect netdevice from system during
 runtime suspend

During runtime suspend in __igb_shutdown() function do not
mark device as removed from system, in igb_down() function
do not indicate loss of carrier and do not stop upper layers
from calling transmit function.

Signed-off-by: Jayasankar <jayasankarx.nara@intel.com>
Signed-off-by: Lai, Poey Seng <poey.seng.lai@intel.com>
Reviewed-by: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
---
 drivers/net/ethernet/intel/igb/igb_main.c | 31 +++++++++++++++++++++++++------
 1 file changed, 25 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 6f7da40..157d021 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -2077,11 +2077,15 @@ void igb_down(struct igb_adapter *adapter)
 	struct e1000_hw *hw = &adapter->hw;
 	u32 tctl, rctl;
 	int i;
-
+	struct pci_dev *pdev = adapter->pdev;
 	/* signal that we're down so the interrupt handler does not
 	 * reschedule our watchdog timer
 	 */
-	set_bit(__IGB_DOWN, &adapter->state);
+	/* While in suspend state the i210 FW is not doing Link Down
+	 * so no need to set state to __IGB_DOWN
+	 */
+	if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING))
+		set_bit(__IGB_DOWN, &adapter->state);
 
 	/* disable receives in the hardware */
 	rctl = rd32(E1000_RCTL);
@@ -2090,8 +2094,14 @@ void igb_down(struct igb_adapter *adapter)
 
 	igb_nfc_filter_exit(adapter);
 
-	netif_carrier_off(netdev);
-	netif_tx_stop_all_queues(netdev);
+	/* for supporting runtime pm based on activity monitoring
+	 * do not stop the queue so that apps can continue using
+	 * the net device as they are not aware of runtime suspend
+	 */
+	if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING)) {
+		netif_carrier_off(netdev);
+		netif_tx_stop_all_queues(netdev);
+	}
 
 	/* disable transmits in the hardware */
 	tctl = rd32(E1000_TCTL);
@@ -2103,7 +2113,11 @@ void igb_down(struct igb_adapter *adapter)
 
 	igb_irq_disable(adapter);
 
-	adapter->flags &= ~IGB_FLAG_NEED_LINK_UPDATE;
+	/* While in suspend state the i210 FW is not doing Link Down
+	 * so no need to clear flag IGB_FLAG_NEED_LINK_UPDATE
+	 */
+	if (!(pdev->dev.power.runtime_status == RPM_SUSPENDING))
+		adapter->flags &= ~IGB_FLAG_NEED_LINK_UPDATE;
 
 	for (i = 0; i < adapter->num_q_vectors; i++) {
 		if (adapter->q_vector[i]) {
@@ -8294,7 +8308,12 @@ static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake,
 #endif
 
 	rtnl_lock();
-	netif_device_detach(netdev);
+	/* For supporting runtime pm based on activity monitoring
+	 * do not disconnect net device from stack while entering
+	 * runtime suspend
+	 */
+	if (!runtime)
+		netif_device_detach(netdev);
 
 	if (netif_running(netdev))
 		__igb_close(netdev, true);
-- 
1.9.1

