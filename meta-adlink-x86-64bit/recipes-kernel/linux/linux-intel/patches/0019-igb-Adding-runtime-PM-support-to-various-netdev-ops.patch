From 8af1d9ca8281e5a653e0b02c697ea2938552a0fc Mon Sep 17 00:00:00 2001
From: Jayasankar <jayasankarx.nara@intel.com>
Date: Wed, 16 Nov 2016 12:54:20 +0800
Subject: [PATCH 19/41] igb: Adding runtime PM support to various netdev ops

invoking resume and schedule suspend from following netdev ops
	igb_set_rx_mode
	igb_set_mac
	igb_change_mtu
	igb_vlan_rx_add_vid
	igb_vlan_rx_kill_vid

igb_set_rx_mode callback is getting invoked under a spinlock,
and pm_runtime_get_sync flow is calling msleep in pci driver
code, hence causing "BUG: scheduling while atomic:" so created
a work task to invoke resume and set rx mode.

In original driver igb_set_rx_mode() and igb_vlan_rx_add_vid()
functions are also getting invoked internally in the driver.
When internally invoked from driver, the caller is already invoke
resume before calling these functions. Hence, if these functions
are called by stack we need to invoke resume and if called internally
we do not need to invoke resume. In order to handle this, create a
separate internal functions.

Signed-off-by: Jayasankar <jayasankarx.nara@intel.com>
Signed-off-by: Lai, Poey Seng <poey.seng.lai@intel.com>
Reviewed-by: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
---
 drivers/net/ethernet/intel/igb/igb.h      |   1 +
 drivers/net/ethernet/intel/igb/igb_main.c | 107 +++++++++++++++++++++++++++---
 2 files changed, 100 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/intel/igb/igb.h b/drivers/net/ethernet/intel/igb/igb.h
index a29886d..b0a0dc6 100644
--- a/drivers/net/ethernet/intel/igb/igb.h
+++ b/drivers/net/ethernet/intel/igb/igb.h
@@ -523,6 +523,7 @@ struct igb_adapter {
 	struct work_struct reset_task;
 	struct work_struct watchdog_task;
 	struct work_struct rpm_xmit_task;
+	struct work_struct set_rx_mode_task;
 	bool fc_autoneg;
 	u8  tx_timeout_factor;
 	struct timer_list blink_timer;
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 630aaf0..775d040 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -149,6 +149,8 @@ enum tx_queue_prio {
 static void igb_watchdog(unsigned long);
 static void igb_watchdog_task(struct work_struct *);
 static void igb_rpm_xmit_task(struct work_struct *);
+static void igb_set_rx_mode_task(struct work_struct *work);
+static void __igb_set_rx_mode(struct net_device *netdev);
 static netdev_tx_t igb_xmit_frame(struct sk_buff *skb, struct net_device *);
 static void igb_get_stats64(struct net_device *dev,
 			    struct rtnl_link_stats64 *stats);
@@ -172,6 +174,7 @@ static void igb_get_stats64(struct net_device *dev,
 static void igb_vlan_mode(struct net_device *netdev,
 			  netdev_features_t features);
 static int igb_vlan_rx_add_vid(struct net_device *, __be16, u16);
+static int __igb_vlan_rx_add_vid(struct net_device *, __be16, u16);
 static int igb_vlan_rx_kill_vid(struct net_device *, __be16, u16);
 static void igb_restore_vlan(struct igb_adapter *);
 static void igb_rar_set_index(struct igb_adapter *, u32);
@@ -1905,7 +1908,7 @@ static void igb_configure(struct igb_adapter *adapter)
 	int i;
 
 	igb_get_hw_control(adapter);
-	igb_set_rx_mode(netdev);
+	__igb_set_rx_mode(netdev);
 	igb_setup_tx_mode(adapter);
 
 	igb_restore_vlan(adapter);
@@ -2908,6 +2911,8 @@ static int igb_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	INIT_WORK(&adapter->reset_task, igb_reset_task);
 	INIT_WORK(&adapter->watchdog_task, igb_watchdog_task);
 	INIT_WORK(&adapter->rpm_xmit_task, igb_rpm_xmit_task);
+	INIT_WORK(&adapter->set_rx_mode_task, igb_set_rx_mode_task);
+
 	/* Initialize link properties that are user-changeable */
 	adapter->fc_autoneg = true;
 	hw->mac.autoneg = true;
@@ -4480,16 +4485,22 @@ static int igb_set_mac(struct net_device *netdev, void *p)
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct e1000_hw *hw = &adapter->hw;
 	struct sockaddr *addr = p;
+	struct pci_dev *pdev = adapter->pdev;
 
-	if (!is_valid_ether_addr(addr->sa_data))
+	pm_runtime_get_sync(&pdev->dev);
+	if (!is_valid_ether_addr(addr->sa_data)) {
+		pm_runtime_mark_last_busy(&pdev->dev);
+		pm_runtime_put_autosuspend(&pdev->dev);
 		return -EADDRNOTAVAIL;
+	}
 
 	memcpy(netdev->dev_addr, addr->sa_data, netdev->addr_len);
 	memcpy(hw->mac.addr, addr->sa_data, netdev->addr_len);
 
 	/* set the correct pool for the new PF MAC address in entry 0 */
 	igb_set_default_mac_filter(adapter);
-
+	pm_runtime_mark_last_busy(&pdev->dev);
+	pm_runtime_put_autosuspend(&pdev->dev);
 	return 0;
 }
 
@@ -4656,16 +4667,59 @@ static void igb_vlan_promisc_disable(struct igb_adapter *adapter)
 		igb_scrub_vfta(adapter, i);
 }
 
+/* igb_set_rx_mode_task - Work task to invoke resume __igb_set_rx_mode()
+ * @work: Kernel work structure
+ *
+ * We cannot invoke resume from gb_set_rx_mode as this function is getting
+ * called under a spinlock, and pm_runtime_get_sync flow is calling msleep
+ * in pci driver code, hence causing "BUG: scheduling while atomic:"
+ * so using this work task to invoke resume
+ */
+static void igb_set_rx_mode_task(struct work_struct *work)
+{
+	struct igb_adapter *adapter = container_of(work,
+						   struct igb_adapter,
+						   set_rx_mode_task);
+	struct net_device *netdev = adapter->netdev;
+	struct pci_dev *pdev = adapter->pdev;
+
+	pm_runtime_get_sync(&pdev->dev);
+
+	__igb_set_rx_mode(netdev);
+	/* Schedule the suspend if netif_carrier_ok returns true
+	 * if netif_carrier_ok returns false let watchdog task
+	 * schedule the suspend
+	 */
+	if (netif_carrier_ok(adapter->netdev)) {
+		pm_runtime_mark_last_busy(&pdev->dev);
+		pm_runtime_put_autosuspend(&pdev->dev);
+	} else {
+		pm_runtime_put_noidle(&pdev->dev);
+	}
+}
+
 /**
  *  igb_set_rx_mode - Secondary Unicast, Multicast and Promiscuous mode set
  *  @netdev: network interface device structure
  *
+**/
+static void igb_set_rx_mode(struct net_device *netdev)
+{
+	struct igb_adapter *adapter = netdev_priv(netdev);
+
+	schedule_work(&adapter->set_rx_mode_task);
+}
+
+/**
+ *  __igb_set_rx_mode - Secondary Unicast, Multicast and Promiscuous mode set
+ *  @netdev: network interface device structure
+ *
  *  The set_rx_mode entry point is called whenever the unicast or multicast
  *  address lists or the network interface flags are updated.  This routine is
  *  responsible for configuring the hardware for proper unicast, multicast,
  *  promiscuous mode, and all-multi behavior.
  **/
-static void igb_set_rx_mode(struct net_device *netdev)
+static void __igb_set_rx_mode(struct net_device *netdev)
 {
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct e1000_hw *hw = &adapter->hw;
@@ -5974,6 +6028,7 @@ static int igb_change_mtu(struct net_device *netdev, int new_mtu)
 	struct pci_dev *pdev = adapter->pdev;
 	int max_frame = new_mtu + ETH_HLEN + ETH_FCS_LEN + VLAN_HLEN;
 
+	pm_runtime_get_sync(&pdev->dev);
 	/* adjust max frame to be at least the size of a standard frame */
 	if (max_frame < (ETH_FRAME_LEN + ETH_FCS_LEN))
 		max_frame = ETH_FRAME_LEN + ETH_FCS_LEN;
@@ -5998,6 +6053,8 @@ static int igb_change_mtu(struct net_device *netdev, int new_mtu)
 
 	clear_bit(__IGB_RESETTING, &adapter->state);
 
+	pm_runtime_mark_last_busy(&pdev->dev);
+	pm_runtime_put_autosuspend(&pdev->dev);
 	return 0;
 }
 
@@ -6552,7 +6609,7 @@ static int igb_set_vf_multicasts(struct igb_adapter *adapter,
 		vf_data->vf_mc_hashes[i] = hash_list[i];
 
 	/* Flush and reset the mta with the new values */
-	igb_set_rx_mode(adapter->netdev);
+	__igb_set_rx_mode(adapter->netdev);
 
 	return 0;
 }
@@ -6829,7 +6886,7 @@ static inline void igb_vf_reset(struct igb_adapter *adapter, u32 vf)
 	adapter->vf_data[vf].num_vf_mc_hashes = 0;
 
 	/* Flush and reset the mta with the new values */
-	igb_set_rx_mode(adapter->netdev);
+	__igb_set_rx_mode(adapter->netdev);
 }
 
 static void igb_vf_reset_event(struct igb_adapter *adapter, u32 vf)
@@ -8319,6 +8376,28 @@ static int igb_vlan_rx_add_vid(struct net_device *netdev,
 			       __be16 proto, u16 vid)
 {
 	struct igb_adapter *adapter = netdev_priv(netdev);
+	struct pci_dev *pdev = adapter->pdev;
+	int ret;
+
+	pm_runtime_get_sync(&pdev->dev);
+
+	ret = __igb_vlan_rx_add_vid(netdev, proto, vid);
+	/* Schedule the suspend if netif_carrier_ok returns true
+	 * else let watchdog task schedule the suspend.
+	 */
+	if (netif_carrier_ok(adapter->netdev)) {
+		pm_runtime_mark_last_busy(&pdev->dev);
+		pm_runtime_put_autosuspend(&pdev->dev);
+	} else {
+		pm_runtime_put_noidle(&pdev->dev);
+	}
+	return ret;
+}
+
+static int __igb_vlan_rx_add_vid(struct net_device *netdev,
+				 __be16 proto, u16 vid)
+{
+	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct e1000_hw *hw = &adapter->hw;
 	int pf_id = adapter->vfs_allocated_count;
 
@@ -8337,12 +8416,24 @@ static int igb_vlan_rx_kill_vid(struct net_device *netdev,
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	int pf_id = adapter->vfs_allocated_count;
 	struct e1000_hw *hw = &adapter->hw;
+	struct pci_dev *pdev = adapter->pdev;
 
+	pm_runtime_get_sync(&pdev->dev);
 	/* remove VID from filter table */
 	if (vid && !(adapter->flags & IGB_FLAG_VLAN_PROMISC))
 		igb_vfta_set(hw, vid, pf_id, false, true);
 
 	clear_bit(vid, adapter->active_vlans);
+	/* Schedule the suspend if netif_carrier_ok returns true
+	 * if netif_carrier_ok returns false let watchdog task
+	 * schedule the suspend
+	 */
+	if (netif_carrier_ok(adapter->netdev)) {
+		pm_runtime_mark_last_busy(&pdev->dev);
+		pm_runtime_put_autosuspend(&pdev->dev);
+	} else {
+		pm_runtime_put_noidle(&pdev->dev);
+	}
 
 	return 0;
 }
@@ -8355,7 +8446,7 @@ static void igb_restore_vlan(struct igb_adapter *adapter)
 	igb_vlan_rx_add_vid(adapter->netdev, htons(ETH_P_8021Q), 0);
 
 	for_each_set_bit_from(vid, adapter->active_vlans, VLAN_N_VID)
-		igb_vlan_rx_add_vid(adapter->netdev, htons(ETH_P_8021Q), vid);
+		__igb_vlan_rx_add_vid(adapter->netdev, htons(ETH_P_8021Q), vid);
 }
 
 int igb_set_spd_dplx(struct igb_adapter *adapter, u32 spd, u8 dplx)
@@ -8461,7 +8552,7 @@ static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake,
 
 	if (wufc) {
 		igb_setup_rctl(adapter);
-		igb_set_rx_mode(netdev);
+		__igb_set_rx_mode(netdev);
 
 		/* turn on all-multi mode if wake on multicast is enabled */
 		if (wufc & E1000_WUFC_MC) {
-- 
1.9.1

