From 8806e0c4440f34cc8de1ecc583d9cedaac2190b6 Mon Sep 17 00:00:00 2001
From: CraigX Kewley <craigx.kewley@intel.com>
Date: Mon, 6 Feb 2017 09:12:57 +0000
Subject: [PATCH 075/102] ASoC: TDF8532: Add generic write function

Allow future expansion of the codec driver by adding generic write function
and macro. Also update all writes to use this.

Signed-off-by: CraigX Kewley <craigx.kewley@intel.com>

Conflicts:
	sound/soc/codecs/tdf8532.h
---
 sound/soc/codecs/tdf8532.c | 143 +++++++++++++++++++++++++--------------------
 sound/soc/codecs/tdf8532.h |  58 ------------------
 2 files changed, 79 insertions(+), 122 deletions(-)

diff --git a/sound/soc/codecs/tdf8532.c b/sound/soc/codecs/tdf8532.c
index 4937e9a..e83e207 100644
--- a/sound/soc/codecs/tdf8532.c
+++ b/sound/soc/codecs/tdf8532.c
@@ -18,50 +18,73 @@
 #include <sound/soc.h>
 #include <sound/tlv.h>
 #include <sound/pcm_params.h>
+#include "tdf8532.h"
 
-struct tdf8532_priv {
-	struct i2c_client *i2c;
+static int __tdf8532_build_pkt(struct tdf8532_priv *dev_data, va_list valist,
+					u8 *payload)
+{
+	int param;
+	u8 len;
+	u8 *cmd_payload;
+	const u8 cmd_offset = 3;
 
-	/* Fine to wrap back to 0 */
-	u8 packet_id;
-};
+	payload[HEADER_TYPE] = MSG_TYPE_STX;
+	payload[HEADER_PKTID] = dev_data->pkt_id;
+
+	cmd_payload = &(payload[cmd_offset]);
+
+	param = va_arg(valist, int);
+	len = 0;
+
+	while (param != END) {
+		cmd_payload[len] = param;
+		len++;
+		param = va_arg(valist, int);
+	}
+
+	payload[HEADER_LEN] = len;
+
+	return len + cmd_offset;
+}
 
-static int tdf8532_cmd_send(struct tdf8532_priv *dev_data, char *cmd_packet,
-		u16 len)
+/* Use macro instead */
+static int __tdf8532_single_write(struct tdf8532_priv *dev_data,
+					int dummy, ...)
 {
-	int ret;
-	u8 packet_id;
+	va_list valist;
+	u8 len;
+	u8 payload[255];
+	int ret = 0;
+	struct device *dev = &(dev_data->i2c->dev);
 
-	packet_id = (len > 1) ? cmd_packet[1] : 0;
+	va_start(valist, dummy);
 
-	ret = i2c_master_send(dev_data->i2c, cmd_packet, len);
+	len = __tdf8532_build_pkt(dev_data, valist, payload);
 
-	if (ret < 0) {
-		dev_err(&(dev_data->i2c->dev),
-			"i2c send packet(%u) returned: %d\n", packet_id, ret);
-		return ret;
-	}
+	va_end(valist);
 
+	print_hex_dump_debug("tdf8532-codec: Tx:", DUMP_PREFIX_NONE, 32, 1,
+				payload, len, false);
+	ret = i2c_master_send(dev_data->i2c, payload, len);
 
-	dev_dbg(&(dev_data->i2c->dev),
-			"i2c send packet(%u) returned: %d\n", packet_id, ret);
+	if (ret < 0)
+		dev_err(dev, "i2c send packet returned: %d\n", ret);
 
-	return 0;
+	dev_data->pkt_id++;
+
+	return ret;
 }
 
 static void tdf8532_dai_shutdown(struct snd_pcm_substream *substream,
 		struct snd_soc_dai *dai)
 {
+	int ret;
 	struct snd_soc_codec *codec = dai->codec;
 	struct tdf8532_priv *tdf8532 = snd_soc_codec_get_drvdata(codec);
 
-	/*disconnect clock*/
-	unsigned char data[] = {0x02, (tdf8532->packet_id)++, 0x03,
-					0x80, 0x1A, 0x00};
-
 	dev_dbg(codec->dev, "%s\n", __func__);
 
-	tdf8532_cmd_send(tdf8532, data, ARRAY_SIZE(data));
+	ret = tdf8532_amp_write(tdf8532, SET_CLK_STATE, CLK_DISCONNECT);
 }
 
 static int tdf8532_dai_trigger(struct snd_pcm_substream *substream, int cmd,
@@ -71,33 +94,29 @@ static int tdf8532_dai_trigger(struct snd_pcm_substream *substream, int cmd,
 	struct snd_soc_codec *codec = dai->codec;
 	struct tdf8532_priv *tdf8532 = snd_soc_codec_get_drvdata(codec);
 
-	/*enable or disable 4 channels*/
-	unsigned char data[] = {0x02, (tdf8532->packet_id)++, 0x03,
-					0x80, 0x00, 0x0F};
-
 	dev_dbg(codec->dev, "%s: cmd = %d\n", __func__, cmd);
 
 	switch (cmd) {
 	case SNDRV_PCM_TRIGGER_START:
 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
 	case SNDRV_PCM_TRIGGER_RESUME:
-		data[4] = 0x26;
-		ret = tdf8532_cmd_send(tdf8532, data, ARRAY_SIZE(data));
+		ret = tdf8532_amp_write(tdf8532, SET_CHNL_ENABLE,
+						CHNL_MASK(tdf8532->channels));
+
 		break;
 
 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
 	case SNDRV_PCM_TRIGGER_SUSPEND:
 	case SNDRV_PCM_TRIGGER_STOP:
-		data[4] = 0x27;
-		ret = tdf8532_cmd_send(tdf8532, data, ARRAY_SIZE(data));
-
+		ret = tdf8532_amp_write(tdf8532, SET_CHNL_DISABLE,
+						CHNL_MASK(tdf8532->channels));
 		/*delay 300ms to allow state change to occur*/
 		/*TODO: add state check to wait for state change*/
 		mdelay(300);
 		break;
 	}
 
-	return tdf8532_cmd_send(tdf8532, data, ARRAY_SIZE(data));
+	return ret;
 }
 
 static int tdf8532_dai_prepare(struct snd_pcm_substream *substream,
@@ -106,33 +125,24 @@ static int tdf8532_dai_prepare(struct snd_pcm_substream *substream,
 	struct snd_soc_codec *codec = dai->codec;
 	struct tdf8532_priv *tdf8532 = snd_soc_codec_get_drvdata(codec);
 
-	/*attach clock*/
-	unsigned char data[] = {0x02, (tdf8532->packet_id)++, 0x03,
-					0x80, 0x1A, 0x01};
-
 	dev_dbg(codec->dev, "%s\n", __func__);
 
-	return tdf8532_cmd_send(tdf8532, data, ARRAY_SIZE(data));
+	return tdf8532_amp_write(tdf8532, SET_CLK_STATE, CLK_CONNECT);
 }
 
-
-#define MUTE 0x42
-#define UNMUTE 0x43
-
 static int tdf8532_mute(struct snd_soc_dai *dai, int mute)
 {
+	struct snd_soc_codec *codec = dai->codec;
 	struct tdf8532_priv *tdf8532 = snd_soc_codec_get_drvdata(dai->codec);
-	unsigned char data[] = {0x02, (tdf8532->packet_id)++, 0x03,
-					0x80, MUTE, 0x1F};
-
-	if (!mute)
-		data[4] = UNMUTE;
-	else
-		data[4] = MUTE;
 
-	dev_dbg(&(tdf8532->i2c->dev), "%s\n", __func__);
+	dev_dbg(codec->dev, "%s\n", __func__);
 
-	return tdf8532_cmd_send(tdf8532, data, ARRAY_SIZE(data));
+	if (mute)
+		return tdf8532_amp_write(tdf8532, SET_CHNL_MUTE,
+						CHNL_MASK(CHNL_MAX));
+	else
+		return tdf8532_amp_write(tdf8532, SET_CHNL_UNMUTE,
+						CHNL_MASK(CHNL_MAX));
 }
 
 static const struct snd_soc_dai_ops tdf8532_dai_ops = {
@@ -160,31 +170,36 @@ static int tdf8532_mute(struct snd_soc_dai *dai, int mute)
 
 
 static int tdf8532_i2c_probe(struct i2c_client *i2c,
-		const struct i2c_device_id *id)
+				const struct i2c_device_id *id)
 {
 	int ret;
-	struct tdf8532_priv *tdf8532;
+	struct tdf8532_priv *dev_data;
+	struct device *dev = &(i2c->dev);
 
 	dev_dbg(&i2c->dev, "%s\n", __func__);
 
-	tdf8532 = devm_kzalloc(&i2c->dev, sizeof(*tdf8532),
-			GFP_KERNEL);
+	dev_data = devm_kzalloc(dev, sizeof(struct tdf8532_priv), GFP_KERNEL);
 
-	if (NULL == tdf8532)
-		return -ENOMEM;
+	if (!dev_data) {
+		ret = -ENOMEM;
+		goto out;
+	}
 
-	tdf8532->i2c = i2c;
-	tdf8532->packet_id = 0;
+	dev_data->i2c = i2c;
+	dev_data->pkt_id = 0;
+	dev_data->channels = 4;
 
-	i2c_set_clientdata(i2c, tdf8532);
+	i2c_set_clientdata(i2c, dev_data);
 
 	ret = snd_soc_register_codec(&i2c->dev, &soc_codec_tdf8532,
-			tdf8532_dai, ARRAY_SIZE(tdf8532_dai));
-	if (ret != 0)
+					tdf8532_dai, ARRAY_SIZE(tdf8532_dai));
+	if (ret != 0) {
 		dev_err(&i2c->dev, "Failed to register codec: %d\n", ret);
+		goto out;
+	}
 
+out:
 	return ret;
-
 }
 
 static int tdf8532_i2c_remove(struct i2c_client *i2c)
diff --git a/sound/soc/codecs/tdf8532.h b/sound/soc/codecs/tdf8532.h
index 6e3f2c1..91ef93c4 100644
--- a/sound/soc/codecs/tdf8532.h
+++ b/sound/soc/codecs/tdf8532.h
@@ -1,18 +1,3 @@
-/*
- * tdf8532.h - Codec driver for NXP Semiconductors
- * Copyright (c) 2017, Intel Corporation.
- *
- * This program is free software; you can redistribute it and/or modify it
- * under the terms and conditions of the GNU General Public License,
- * version 2, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- */
-
-
 #ifndef __TDF8532_H_
 #define __TDF8532_H_
 
@@ -43,49 +28,6 @@
 #define SET_CHNL_MUTE 0x42
 #define SET_CHNL_UNMUTE 0x43
 
-struct header_repl {
-	u8 msg_type;
-	u8 pkt_id;
-	u8 len;
-} __packed;
-
-#define GET_IDENT 0xE0
-
-struct get_ident_repl {
-	struct header_repl header;
-	u8 module_id;
-	u8 cmd_id;
-	u8 type_name;
-	u8 hw_major;
-	u8 hw_minor;
-	u8 sw_major;
-	u8 sw_minor;
-	u8 sw_sub;
-} __packed;
-
-#define GET_ERROR 0xE2
-
-struct get_error_repl {
-	struct header_repl header;
-	u8 module_id;
-	u8 cmd_id;
-	u8 last_cmd_id;
-	u8 error;
-	u8 status;
-} __packed;
-
-#define GET_DEV_STATUS 0x80
-
-enum dev_state {STATE_BOOT, STATE_IDLE, STATE_STBY, STATE_LDAG, STATE_PLAY,
-			STATE_PROT, STATE_SDWN, STATE_CLFA, STATE_NONE };
-
-struct get_dev_status_repl {
-	struct header_repl header;
-	u8 module_id;
-	u8 cmd_id;
-	u8 state;
-} __packed;
-
 /* Helpers */
 #define CHNL_MASK(channels) (u8)((0x00FF << channels) >> 8)
 
-- 
1.9.1

