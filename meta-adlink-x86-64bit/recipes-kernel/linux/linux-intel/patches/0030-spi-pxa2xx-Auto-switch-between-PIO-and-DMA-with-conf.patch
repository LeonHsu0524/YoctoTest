From 6dd2e4807e13c8e83a6921d7a9972528d66dfcde Mon Sep 17 00:00:00 2001
From: Weifeng Voon <weifeng.voon@intel.com>
Date: Thu, 5 Oct 2017 13:05:10 +0800
Subject: [PATCH 30/40] spi: pxa2xx: Auto switch between PIO and DMA with
 configurable threshold value

It is not efficient to transfer small data size using dma. Hence,
pio_dma_threshold is introduced in struct pxa2xx_spi_chip. By configuring
pio_dma_threshold in spi_board_info, the driver will automatically be in
PIO mode/DMA mode depending on the logic below:

PIO mode when:
transfer length < pio_dma_threshold

DMA mode when:
transfer length >= pio_dma_threshold

[Forward port to Linux kernel 4.9]

The spi driver_data->dma_mapped has to take pio_dma_threshold value into
consideration when deciding between PIO mode/DMA mode. If the current
transfer length as defined in driver_data->len is less than
pio_dma_threshold, PIO mode should be enabled, irrespective of its
DMA capability.

Hence, introduced the check:
dma_mapped = ... && (drv_data->len > chip->pio_dma_threshold) && ...
in the function pump_transfer().

Signed-off-by: Weifeng Voon <weifeng.voon@intel.com>
Signed-off-by: Sachin Mokashi <sachinx.mokashi@intel.com>
Signed-off-by: Wan Ahmad Zainie <wan.ahmad.zainie.wan.mohamad@intel.com>
---
 drivers/spi/spi-pxa2xx.c       | 3 +++
 drivers/spi/spi-pxa2xx.h       | 1 +
 include/linux/spi/pxa2xx_spi.h | 1 +
 3 files changed, 5 insertions(+)

diff --git a/drivers/spi/spi-pxa2xx.c b/drivers/spi/spi-pxa2xx.c
index 4cb515a..a606f14 100644
--- a/drivers/spi/spi-pxa2xx.c
+++ b/drivers/spi/spi-pxa2xx.c
@@ -1102,6 +1102,7 @@ static void pump_transfers(unsigned long data)
 
 	dma_mapped = master->can_dma &&
 		     master->can_dma(master, message->spi, transfer) &&
+		     (drv_data->len > chip->pio_dma_threshold) &&
 		     master->cur_msg_mapped;
 	if (dma_mapped) {
 
@@ -1341,6 +1342,8 @@ static int setup(struct spi_device *spi)
 		chip->dma_threshold = 0;
 		if (chip_info->enable_loopback)
 			chip->cr1 = SSCR1_LBM;
+		if (chip_info->pio_dma_threshold)
+			chip->pio_dma_threshold = chip_info->pio_dma_threshold;
 	}
 
 	chip->lpss_rx_threshold = SSIRF_RxThresh(rx_thres);
diff --git a/drivers/spi/spi-pxa2xx.h b/drivers/spi/spi-pxa2xx.h
index 02a8012..bccf675 100644
--- a/drivers/spi/spi-pxa2xx.h
+++ b/drivers/spi/spi-pxa2xx.h
@@ -90,6 +90,7 @@ struct chip_data {
 	int (*write)(struct driver_data *drv_data);
 	int (*read)(struct driver_data *drv_data);
 	void (*cs_control)(u32 command);
+	u32 pio_dma_threshold;
 };
 
 static inline u32 pxa2xx_spi_read(const struct driver_data *drv_data,
diff --git a/include/linux/spi/pxa2xx_spi.h b/include/linux/spi/pxa2xx_spi.h
index 9ec4c14..1af35cf 100644
--- a/include/linux/spi/pxa2xx_spi.h
+++ b/include/linux/spi/pxa2xx_spi.h
@@ -47,6 +47,7 @@ struct pxa2xx_spi_chip {
 	u8 enable_loopback;
 	int gpio_cs;
 	void (*cs_control)(u32 command);
+	u32 pio_dma_threshold;
 };
 
 #if defined(CONFIG_ARCH_PXA) || defined(CONFIG_ARCH_MMP)
-- 
1.9.1

