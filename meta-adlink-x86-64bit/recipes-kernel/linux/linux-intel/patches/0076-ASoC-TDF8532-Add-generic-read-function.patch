From faeeef4d7d68cc6d107904f53b92f0341845ebdd Mon Sep 17 00:00:00 2001
From: CraigX Kewley <craigx.kewley@intel.com>
Date: Mon, 6 Feb 2017 10:06:48 +0000
Subject: [PATCH 076/102] ASoC: TDF8532: Add generic read function

Allow future expansion of the codec driver by adding generic read function
and define read commands.

Signed-off-by: CraigX Kewley <craigx.kewley@intel.com>
---
 sound/soc/codecs/tdf8532.c | 65 +++++++++++++++++++++++++++++++++++++++++++++-
 sound/soc/codecs/tdf8532.h | 45 ++++++++++++++++++++++++++++++++
 2 files changed, 109 insertions(+), 1 deletion(-)

diff --git a/sound/soc/codecs/tdf8532.c b/sound/soc/codecs/tdf8532.c
index e83e207..1510ebd 100644
--- a/sound/soc/codecs/tdf8532.c
+++ b/sound/soc/codecs/tdf8532.c
@@ -14,6 +14,8 @@
 #include <linux/init.h>
 #include <linux/i2c.h>
 #include <linux/delay.h>
+#include <linux/jiffies.h>
+#include <linux/time.h>
 #include <linux/acpi.h>
 #include <sound/soc.h>
 #include <sound/tlv.h>
@@ -75,6 +77,68 @@ static int __tdf8532_single_write(struct tdf8532_priv *dev_data,
 	return ret;
 }
 
+
+static uint8_t tdf8532_read_wait_ack(struct tdf8532_priv *dev_data,
+						unsigned long timeout_val)
+{
+	uint8_t ack_repl[HEADER_SIZE] = {0, 0, 0};
+	unsigned long timeout = jiffies + timeout_val;
+	int ret;
+
+	do {
+		ret = i2c_master_recv(dev_data->i2c, ack_repl, HEADER_SIZE);
+		if (ret < 0)
+			goto out;
+
+	} while (time_before(jiffies, timeout) && ack_repl[0] != MSG_TYPE_ACK);
+
+	if (ack_repl[0] != MSG_TYPE_ACK)
+		return -ETIME;
+	else
+		return ack_repl[2];
+
+out:
+	return ret;
+}
+
+static uint8_t tdf8532_single_read(struct tdf8532_priv *dev_data,
+					char **repl_buff)
+{
+	int ret;
+	uint8_t recv_len;
+	struct device *dev = &(dev_data->i2c->dev);
+
+	ret = tdf8532_read_wait_ack(dev_data, msecs_to_jiffies(ACK_TIMEOUT));
+
+	if (ret < 0) {
+		dev_err(dev, "Error waiting for ACK reply: %d\n", ret);
+		goto out;
+	}
+
+	recv_len = ret + HEADER_SIZE;
+	*repl_buff = kzalloc(recv_len, GFP_KERNEL);
+
+	ret = i2c_master_recv(dev_data->i2c, *repl_buff, recv_len);
+
+	print_hex_dump_debug("tdf8532-codec: Rx:", DUMP_PREFIX_NONE, 32, 1,
+				*repl_buff, recv_len, false);
+
+	if (ret < 0 || ret != recv_len) {
+		dev_err(dev, "i2c recv packet size: %d (expected: %d)\n",
+				ret, recv_len);
+		goto out_free;
+	}
+
+	return recv_len;
+
+out_free:
+	kfree(*repl_buff);
+	repl_buff = NULL;
+out:
+	return ret;
+}
+
+
 static void tdf8532_dai_shutdown(struct snd_pcm_substream *substream,
 		struct snd_soc_dai *dai)
 {
@@ -168,7 +232,6 @@ static int tdf8532_mute(struct snd_soc_dai *dai, int mute)
 	}
 };
 
-
 static int tdf8532_i2c_probe(struct i2c_client *i2c,
 				const struct i2c_device_id *id)
 {
diff --git a/sound/soc/codecs/tdf8532.h b/sound/soc/codecs/tdf8532.h
index 91ef93c4..743de7e 100644
--- a/sound/soc/codecs/tdf8532.h
+++ b/sound/soc/codecs/tdf8532.h
@@ -28,6 +28,51 @@
 #define SET_CHNL_MUTE 0x42
 #define SET_CHNL_UNMUTE 0x43
 
+/* Get commands */
+
+struct header_repl {
+	u8 msg_type;
+	u8 pkt_id;
+	u8 len;
+} __packed;
+
+#define GET_IDENT 0xE0
+
+struct get_ident_repl {
+	struct header_repl header;
+	u8 module_id;
+	u8 cmd_id;
+	u8 type_name;
+	u8 hw_major;
+	u8 hw_minor;
+	u8 sw_major;
+	u8 sw_minor;
+	u8 sw_sub;
+} __packed;
+
+#define GET_ERROR 0xE2
+
+struct get_error_repl {
+	struct header_repl header;
+	u8 module_id;
+	u8 cmd_id;
+	u8 last_cmd_id;
+	u8 error;
+	u8 status;
+} __packed;
+
+#define GET_DEV_STATUS 0x80
+
+enum dev_state {STATE_BOOT, STATE_IDLE, STATE_STBY, STATE_LDAG, STATE_PLAY,
+			STATE_PROT, STATE_SDWN, STATE_CLFA, STATE_NONE };
+
+struct get_dev_status_repl {
+	struct header_repl header;
+	u8 module_id;
+	u8 cmd_id;
+	u8 state;
+} __packed;
+
 /* Helpers */
 #define CHNL_MASK(channels) (u8)((0x00FF << channels) >> 8)
 
-- 
1.9.1

