From a9bfd2916816aaf54cc598b0dfd29945acf80d45 Mon Sep 17 00:00:00 2001
From: Jayasankar <jayasankarx.nara@intel.com>
Date: Thu, 29 Dec 2016 11:37:47 +0800
Subject: [PATCH 13/41] igb: Using rtnl_trylock to avoid deadlock during
 runtime resume

Network device ioctl function in net/core/dev_ioctl.c is acquiring
rtnl_lock for some ioctl commands like ethtool(SIOCETHTOOL) before
calling the driver op function. Invoking runtime resume for handling
such ioctl and acquiring rtnl_lock in igb_resume() function is causing
deadlock. To avoid deadlock in such cases using rtnl_trylock.

While runtime resuming is in progress, device runtime state will be
RESUMING and there is no other activity can happen on net_device
structure until the runtime state changes to ACTIVE. With the current
design while resuming is in progress, if any of the net device
operations callback is called, the callback will not proceed until the
state is changed to ACTIVE. So there is no chance of simultaneous access
even if we use trylock.

Signed-off-by: Jayasankar <jayasankarx.nara@intel.com>
Signed-off-by: Chuah, Kim Tatt <kim.tatt.chuah@intel.com>
Signed-off-by: Lai, Poey Seng <poey.seng.lai@intel.com>
Reviewed-by: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
---
 drivers/net/ethernet/intel/igb/igb_main.c | 23 +++++++++++++++++------
 1 file changed, 17 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 6834a76..a952f03 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -8446,6 +8446,7 @@ static int __maybe_unused igb_resume(struct device *dev)
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct e1000_hw *hw = &adapter->hw;
 	u32 err, val;
+	int status;
 
 	pci_set_power_state(pdev, PCI_D0);
 	pci_restore_state(pdev);
@@ -8482,14 +8483,24 @@ static int __maybe_unused igb_resume(struct device *dev)
 
 	wr32(E1000_WUS, ~0);
 
-	rtnl_lock();
-	if (!err && netif_running(netdev))
-		err = __igb_open(netdev, true);
+	if (!(pdev->dev.power.runtime_status == RPM_RESUMING)) {
+		rtnl_lock();
+		if (!err && netif_running(netdev))
+			err = __igb_open(netdev, true);
 
-	if (!err)
-		netif_device_attach(netdev);
-	rtnl_unlock();
+		if (!err)
+			netif_device_attach(netdev);
+		rtnl_unlock();
+	} else {
+		status = rtnl_trylock();
+		if (!err && netif_running(netdev))
+			err = __igb_open(netdev, true);
 
+		if (!err)
+			netif_device_attach(netdev);
+		if (status)
+			rtnl_unlock();
+	}
 	return err;
 }
 
-- 
1.9.1

