From a0ebacbb45ad391f3a6f9acdebe3b4489fb38dcd Mon Sep 17 00:00:00 2001
From: Pardha Saradhi K <pardha.saradhi.kesapragada@intel.com>
Date: Tue, 7 Jun 2016 13:43:39 +0530
Subject: [PATCH 13/31] ASoC: Intel: Skylake: Add support for various PCM
 formats

Add support for S24_LE, S24_3LE, S32_LE and FLOAT PCM formats.
The sample type field of the gateway copiers have to be
set such that the format is conveyed to the DSP. Based on this,
the copier will do a type conversion

Change-Id: I7a6ff9d2b078db086ddf9a1907b7aaac0ad7e922
Signed-off-by: Pardha Saradhi K <pardha.saradhi.kesapragada@intel.com>
Reviewed-on: https://git-gar-1.devtools.intel.com/gerrit/9550
Reviewed-by: B, Jayachandran <jayachandran.b@intel.com>
Reviewed-by: Babu, Ramesh <ramesh.babu@intel.com>
Tested-by: Babu, Ramesh <ramesh.babu@intel.com>

Conflicts:
	sound/soc/intel/skylake/skl-pcm.c
	sound/soc/intel/skylake/skl-topology.h

Conflicts:
	sound/soc/intel/skylake/skl-pcm.c
---
 sound/soc/intel/skylake/skl-pcm.c      | 21 ++++++++++-----
 sound/soc/intel/skylake/skl-topology.c | 48 +++++++++++++++++++++++++---------
 sound/soc/intel/skylake/skl-topology.h | 12 +++++++--
 3 files changed, 60 insertions(+), 21 deletions(-)

diff --git a/sound/soc/intel/skylake/skl-pcm.c b/sound/soc/intel/skylake/skl-pcm.c
index 611143a..90389ef 100644
--- a/sound/soc/intel/skylake/skl-pcm.c
+++ b/sound/soc/intel/skylake/skl-pcm.c
@@ -52,7 +52,8 @@
 	.formats =		SNDRV_PCM_FMTBIT_S16_LE |
 				SNDRV_PCM_FMTBIT_S32_LE |
 				SNDRV_PCM_FMTBIT_S24_LE |
-				SNDRV_PCM_FMTBIT_FLOAT_LE,
+				SNDRV_PCM_FMTBIT_FLOAT_LE |
+				SNDRV_PCM_FMTBIT_S24_3LE,
 	.rates =		SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
 	.rate_min =		8000,
 	.rate_max =		192000,
@@ -378,8 +379,12 @@ static int skl_pcm_hw_params(struct snd_pcm_substream *substream,
 
 
 	m_cfg = skl_tplg_fe_get_cpr_module(dai, p_params.stream);
-	if (m_cfg)
-		skl_tplg_update_pipe_params(dai->dev, m_cfg, &p_params);
+	if (m_cfg) {
+		skl_tplg_update_pipe_params(dai->dev,
+					m_cfg,
+					&p_params,
+					params_format(params));
+	}
 
 	return 0;
 }
@@ -1142,7 +1147,8 @@ struct skl_dsp_notify_ops cb_ops = {
 		.channels_max = HDA_8_CH,
 		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
 		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_FLOAT_LE,
+			SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_FLOAT_LE |
+			SNDRV_PCM_FMTBIT_S24_3LE,
 		.sig_bits = 32,
 	},
 	.capture = {
@@ -1151,7 +1157,8 @@ struct skl_dsp_notify_ops cb_ops = {
 		.channels_max = HDA_8_CH,
 		.rates = SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT,
 		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
-			SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_FLOAT_LE,
+			SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_FLOAT_LE |
+			SNDRV_PCM_FMTBIT_S24_3LE,
 		.sig_bits = 32,
 	},
 },
@@ -1293,7 +1300,9 @@ struct skl_dsp_notify_ops cb_ops = {
 		.channels_max = HDA_STEREO,
 		.rates = SNDRV_PCM_RATE_48000 | SNDRV_PCM_RATE_16000 |
 			SNDRV_PCM_RATE_8000,
-		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE |
+			SNDRV_PCM_FMTBIT_S24_3LE | SNDRV_PCM_FMTBIT_S32_LE |
+			SNDRV_PCM_FMTBIT_FLOAT_LE,
 	},
 },
 {
diff --git a/sound/soc/intel/skylake/skl-topology.c b/sound/soc/intel/skylake/skl-topology.c
index 8400959..fe677b7 100644
--- a/sound/soc/intel/skylake/skl-topology.c
+++ b/sound/soc/intel/skylake/skl-topology.c
@@ -2715,7 +2715,8 @@ static int skl_tplg_tlv_probe_set(struct snd_kcontrol *kcontrol,
  */
 int skl_tplg_update_pipe_params(struct device *dev,
 			struct skl_module_cfg *mconfig,
-			struct skl_pipe_params *params)
+			struct skl_pipe_params *params,
+			snd_pcm_format_t fmt)
 {
 	struct skl_module_res *res = &mconfig->module->resources[0];
 	struct skl *skl = get_skl_ctx(dev);
@@ -2737,26 +2738,47 @@ int skl_tplg_update_pipe_params(struct device *dev,
 	/* set the hw_params */
 	format->s_freq = params->s_freq;
 	format->channels = params->ch;
-	format->valid_bit_depth = skl_get_bit_depth(params->s_fmt);
 
 	/*
-	 * 16 bit is 16 bit container whereas 24 bit is in 32 bit
-	 * container so update bit depth accordingly
-	 */
-	switch (format->valid_bit_depth) {
-	case SKL_DEPTH_16BIT:
-		format->bit_depth = format->valid_bit_depth;
+		* set copier sample type as follows
+		* 0 : if data is MSB aligned in the container
+		* 1 : if data is LSB aligned in the container
+		* 4 : if float
+	*/
+	switch (fmt) {
+	case SKL_FMT_S16LE:
+		format->valid_bit_depth = SKL_DEPTH_16BIT;
+		format->bit_depth = SKL_DEPTH_16BIT;
+		format->sample_type = SKL_SAMPLE_TYPE_INT_MSB;
+		break;
+
+	case SKL_FMT_S24LE:
+		format->valid_bit_depth = SKL_DEPTH_24BIT;
+		format->bit_depth = SKL_DEPTH_32BIT;
+		format->sample_type = SKL_SAMPLE_TYPE_INT_LSB;
+		break;
+
+	case SKL_FMT_S32LE:
+		format->valid_bit_depth = SKL_DEPTH_32BIT;
+		format->bit_depth = SKL_DEPTH_32BIT;
+		format->sample_type = SKL_SAMPLE_TYPE_INT_MSB;
 		break;
 
-	case SKL_DEPTH_24BIT:
-	case SKL_DEPTH_32BIT:
+	case SKL_FMT_FLOATLE:
+		format->valid_bit_depth = SKL_DEPTH_32BIT;
 		format->bit_depth = SKL_DEPTH_32BIT;
+		format->sample_type = SKL_SAMPLE_TYPE_FLOAT;
+		break;
+
+	case SKL_FMT_S24_3LE:
+		format->valid_bit_depth = SKL_DEPTH_24BIT;
+		format->bit_depth = SKL_DEPTH_24BIT;
+		format->sample_type = SKL_SAMPLE_TYPE_INT_MSB;
 		break;
 
 	default:
-		dev_err(dev, "Invalid bit depth %x for pipe\n",
-				format->valid_bit_depth);
-		return -EINVAL;
+		format->bit_depth = SKL_DEPTH_32BIT;
+		format->sample_type = SKL_SAMPLE_TYPE_INT_MSB;
 	}
 
 	if (params->stream == SNDRV_PCM_STREAM_PLAYBACK) {
diff --git a/sound/soc/intel/skylake/skl-topology.h b/sound/soc/intel/skylake/skl-topology.h
index 20e6821..d62202b 100644
--- a/sound/soc/intel/skylake/skl-topology.h
+++ b/sound/soc/intel/skylake/skl-topology.h
@@ -77,6 +77,13 @@ enum skl_bitdepth {
 	SKL_DEPTH_INVALID
 };
 
+enum skl_format {
+	SKL_FMT_S16LE = 2,
+	SKL_FMT_S24LE = 6,
+	SKL_FMT_S32LE = 10,
+	SKL_FMT_FLOATLE = 14,
+	SKL_FMT_S24_3LE = 32
+};
 
 enum skl_s_freq {
 	SKL_FS_8000 = 8000,
@@ -556,8 +563,9 @@ int skl_tplg_init(struct snd_soc_platform *platform,
 struct skl_module_cfg *skl_tplg_fe_get_cpr_module(
 		struct snd_soc_dai *dai, int stream);
 int skl_tplg_update_pipe_params(struct device *dev,
-		struct skl_module_cfg *mconfig, struct skl_pipe_params *params);
-
+			struct skl_module_cfg *mconfig,
+			struct skl_pipe_params *params,
+			snd_pcm_format_t fmt);
 void skl_tplg_d0i3_get(struct skl *skl, enum d0i3_capability caps);
 void skl_tplg_d0i3_put(struct skl *skl, enum d0i3_capability caps);
 
-- 
1.9.1

