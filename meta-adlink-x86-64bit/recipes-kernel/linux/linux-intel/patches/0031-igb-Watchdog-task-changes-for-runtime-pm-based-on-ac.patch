From 866a2c8aff15a9c9588e56704f3ce76c28e4ca3f Mon Sep 17 00:00:00 2001
From: Jayasankar <jayasankarx.nara@intel.com>
Date: Tue, 15 Nov 2016 18:23:30 +0800
Subject: [PATCH 31/42] igb: Watchdog task changes for runtime pm based on
 activity monitoring

If watchdog task is invoked while runtime suspend is in
progress, prevent the rescheduling of watchdog.

Do not cancel the suspend on link connected case, as we
are supporting runtime PM with n/w cable connected.

In link not connected case irrespective of net_carrier_ok
return value, schedule the runtime suspend.

Signed-off-by: Jayasankar <jayasankarx.nara@intel.com>
Signed-off-by: Lai, Poey Seng <poey.seng.lai@intel.com>
Reviewed-by: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
---
 drivers/net/ethernet/intel/igb/igb_main.c | 38 +++++++++++++++++++++++--------
 1 file changed, 29 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 1ff14ea..ffc45ca 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -5053,14 +5053,27 @@ static void igb_watchdog_task(struct work_struct *work)
 	int i;
 	u32 connsw;
 	u16 phy_data, retry_count = 20;
+	struct pci_dev *pdev = adapter->pdev;
+
+	/* While suspend in progress prevent rescheduling of watchdog */
+	if (pdev->dev.power.runtime_status == RPM_SUSPENDING ||
+	    pdev->dev.power.runtime_status == RPM_SUSPENDED) {
+		return;
+	}
 
 	link = igb_has_link(adapter);
 
-	if (adapter->flags & IGB_FLAG_NEED_LINK_UPDATE) {
-		if (time_after(jiffies, (adapter->link_check_timeout + HZ)))
-			adapter->flags &= ~IGB_FLAG_NEED_LINK_UPDATE;
-		else
-			link = false;
+	if (pdev->dev.power.disable_depth) {
+		/* The igb firmware does not perform link down
+		 * under runtime PM.
+		 */
+		if (adapter->flags & IGB_FLAG_NEED_LINK_UPDATE) {
+			if (time_after(jiffies,
+				       (adapter->link_check_timeout + HZ)))
+				adapter->flags &= ~IGB_FLAG_NEED_LINK_UPDATE;
+			else
+				link = false;
+		}
 	}
 
 	/* Force link down if we have fiber to swap to */
@@ -5078,8 +5091,12 @@ static void igb_watchdog_task(struct work_struct *work)
 			adapter->flags |= IGB_FLAG_MEDIA_RESET;
 			igb_reset(adapter);
 		}
-		/* Cancel scheduled suspend requests. */
-		pm_runtime_resume(netdev->dev.parent);
+		/* Do not cancel suspend for supporting runtime PM
+		 * when cable is connected.
+		 * disable_depth is 1 meaning runtime pm disabled.
+		 */
+		if (pdev->dev.power.disable_depth)
+			pm_runtime_resume(netdev->dev.parent);
 
 		if (!netif_carrier_ok(netdev)) {
 			u32 ctrl;
@@ -5192,8 +5209,6 @@ static void igb_watchdog_task(struct work_struct *work)
 					return;
 				}
 			}
-			pm_schedule_suspend(netdev->dev.parent,
-					    MSEC_PER_SEC * 5);
 
 		/* also check for alternate media here */
 		} else if (!netif_carrier_ok(netdev) &&
@@ -5205,6 +5220,11 @@ static void igb_watchdog_task(struct work_struct *work)
 				return;
 			}
 		}
+		/* For runtime PM, schedule suspend when link is not connected
+		 * irrespective of netif_carrier_ok, otherwise scenerio where
+		 * driver is loaded w/o n/w cable is not entering to suspend
+		 */
+		pm_request_autosuspend(netdev->dev.parent);
 	}
 
 	spin_lock(&adapter->stats64_lock);
-- 
1.9.1

