From 7e16f5058ffe6dcde1f5b60df9f9adfa32b1f385 Mon Sep 17 00:00:00 2001
From: Craig Kewley <craigx.kewley@intel.com>
Date: Thu, 18 May 2017 15:45:58 +0100
Subject: [PATCH 077/102] ASoC: TDF8532: reorder state change commands

Early audio component holds speaker ALSA device open even when not playing.
Move all state change functions to the trigger callback so the TDF8532 is
always in the lowest power state it can be and the code is simplified.

Signed-off-by: Craig Kewley <craigx.kewley@intel.com>
---
 sound/soc/codecs/tdf8532.c | 50 +++++++++++++++++++++++-----------------------
 1 file changed, 25 insertions(+), 25 deletions(-)

diff --git a/sound/soc/codecs/tdf8532.c b/sound/soc/codecs/tdf8532.c
index 1510ebd..82d41b1 100644
--- a/sound/soc/codecs/tdf8532.c
+++ b/sound/soc/codecs/tdf8532.c
@@ -138,19 +138,36 @@ static uint8_t tdf8532_single_read(struct tdf8532_priv *dev_data,
 	return ret;
 }
 
-
-static void tdf8532_dai_shutdown(struct snd_pcm_substream *substream,
-		struct snd_soc_dai *dai)
+static int tdf8532_start_play(struct tdf8532_priv *tdf8532)
 {
 	int ret;
-	struct snd_soc_codec *codec = dai->codec;
-	struct tdf8532_priv *tdf8532 = snd_soc_codec_get_drvdata(codec);
 
-	dev_dbg(codec->dev, "%s\n", __func__);
+	ret = tdf8532_amp_write(tdf8532, SET_CHNL_ENABLE,
+			CHNL_MASK(tdf8532->channels));
+
+	if (ret < 0)
+		return ret;
+
+	ret = tdf8532_amp_write(tdf8532, SET_CLK_STATE, CLK_CONNECT);
+
+	return ret;
+}
+
+static int tdf8532_stop_play(struct tdf8532_priv *tdf8532)
+{
+	int ret;
 
 	ret = tdf8532_amp_write(tdf8532, SET_CLK_STATE, CLK_DISCONNECT);
+	if (ret < 0)
+		return ret;
+
+	ret = tdf8532_amp_write(tdf8532, SET_CHNL_DISABLE,
+			CHNL_MASK(tdf8532->channels));
+
+	return ret;
 }
 
+
 static int tdf8532_dai_trigger(struct snd_pcm_substream *substream, int cmd,
 		struct snd_soc_dai *dai)
 {
@@ -164,16 +181,12 @@ static int tdf8532_dai_trigger(struct snd_pcm_substream *substream, int cmd,
 	case SNDRV_PCM_TRIGGER_START:
 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
 	case SNDRV_PCM_TRIGGER_RESUME:
-		ret = tdf8532_amp_write(tdf8532, SET_CHNL_ENABLE,
-						CHNL_MASK(tdf8532->channels));
-
+		ret = tdf8532_start_play(tdf8532);
 		break;
-
 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
 	case SNDRV_PCM_TRIGGER_SUSPEND:
 	case SNDRV_PCM_TRIGGER_STOP:
-		ret = tdf8532_amp_write(tdf8532, SET_CHNL_DISABLE,
-						CHNL_MASK(tdf8532->channels));
+		ret = tdf8532_stop_play(tdf8532);
 		/*delay 300ms to allow state change to occur*/
 		/*TODO: add state check to wait for state change*/
 		mdelay(300);
@@ -183,17 +196,6 @@ static int tdf8532_dai_trigger(struct snd_pcm_substream *substream, int cmd,
 	return ret;
 }
 
-static int tdf8532_dai_prepare(struct snd_pcm_substream *substream,
-						struct snd_soc_dai *dai)
-{
-	struct snd_soc_codec *codec = dai->codec;
-	struct tdf8532_priv *tdf8532 = snd_soc_codec_get_drvdata(codec);
-
-	dev_dbg(codec->dev, "%s\n", __func__);
-
-	return tdf8532_amp_write(tdf8532, SET_CLK_STATE, CLK_CONNECT);
-}
-
 static int tdf8532_mute(struct snd_soc_dai *dai, int mute)
 {
 	struct snd_soc_codec *codec = dai->codec;
@@ -210,9 +212,7 @@ static int tdf8532_mute(struct snd_soc_dai *dai, int mute)
 }
 
 static const struct snd_soc_dai_ops tdf8532_dai_ops = {
-	.shutdown = tdf8532_dai_shutdown,
 	.trigger  = tdf8532_dai_trigger,
-	.prepare  = tdf8532_dai_prepare,
 	.digital_mute = tdf8532_mute,
 };
 
-- 
1.9.1

