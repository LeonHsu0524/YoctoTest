From c32bdfb4d2981a3bcdd1c18bf0be0f69f6e899cc Mon Sep 17 00:00:00 2001
From: "Lai, Poey Seng" <poey.seng.lai@intel.com>
Date: Thu, 23 Feb 2017 14:18:02 +0800
Subject: [PATCH 22/41] igb: Enable directed ARP wake for RTD3

This patch configures IP4AT register with the IP address value and sets
the corresponding IPAV register bit when entering RTD3. The target wakes
up on ARP request that matches the target's IP address.

Signed-off-by: Lai, Poey Seng <poey.seng.lai@intel.com>
Reviewed-by: Vinod Kumar <vinod.kumarx.vinod.kumar@intel.com>
---
 drivers/net/ethernet/intel/igb/e1000_defines.h |  1 +
 drivers/net/ethernet/intel/igb/igb_main.c      | 35 ++++++++++++++++++++++++--
 2 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/intel/igb/e1000_defines.h b/drivers/net/ethernet/intel/igb/e1000_defines.h
index 83cabff..c6368e2 100644
--- a/drivers/net/ethernet/intel/igb/e1000_defines.h
+++ b/drivers/net/ethernet/intel/igb/e1000_defines.h
@@ -38,6 +38,7 @@
 #define E1000_WUFC_EX   0x00000004 /* Directed Exact Wakeup Enable */
 #define E1000_WUFC_MC   0x00000008 /* Directed Multicast Wakeup Enable */
 #define E1000_WUFC_BC   0x00000010 /* Broadcast Wakeup Enable */
+#define E1000_WUFC_ARPD 0x00000020 /* ARP Directed Wakeup Enable */
 
 /* Wake Up Status */
 #define E1000_WUS_EX	0x00000004 /* Directed Exact */
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 6821d0e..8883d35 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -29,6 +29,7 @@
 #include <linux/bitops.h>
 #include <linux/vmalloc.h>
 #include <linux/pagemap.h>
+#include <linux/inetdevice.h>
 #include <linux/netdevice.h>
 #include <linux/ipv6.h>
 #include <linux/slab.h>
@@ -8515,8 +8516,11 @@ static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake,
 	struct net_device *netdev = pci_get_drvdata(pdev);
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct e1000_hw *hw = &adapter->hw;
-	u32 ctrl, rctl, status;
-	u32 wufc = runtime ? (E1000_WUFC_LNKC | E1000_WUFC_EX) : adapter->wol;
+	u32 ctrl, rctl, status, ipav;
+	u8 i;
+	__be32 ipv4_addr;
+	u32 wufc = runtime ? (E1000_WUFC_LNKC | E1000_WUFC_EX |
+						E1000_WUFC_ARPD) : adapter->wol;
 #ifdef CONFIG_PM
 	int retval = 0;
 #endif
@@ -8567,6 +8571,33 @@ static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake,
 			rctl |= E1000_RCTL_UPE;
 			wr32(E1000_RCTL, rctl);
 		}
+
+		/* Enable wake on ARP request & device IP address match */
+		if ((wufc & E1000_WUFC_ARPD) && netdev->ip_ptr) {
+			if (netdev->ip_ptr->ifa_list) {
+				ipv4_addr = netdev->ip_ptr->ifa_list->ifa_local;
+
+				/* Check availability of IP4AT(n) registers */
+				ipav = rd32(E1000_IPAV);
+				for (i = 0; i < 4; i++) {
+					if ((ipav & (BIT(i))) == 0)
+						break;
+				}
+
+				if (i < 4) {
+					dev_dbg(&pdev->dev,
+						"Use IP4AT(%0d). Data = 0x%x\n",
+						i, ipv4_addr);
+				} else {
+					i = 0;
+					dev_warn(&pdev->dev,
+						 "IP4AT(0) overwritten.\n");
+				}
+				wr32(E1000_IP4AT_REG(i), ipv4_addr);
+				wr32(E1000_IPAV, BIT(i));
+			}
+		}
+
 		ctrl = rd32(E1000_CTRL);
 		/* advertise wake from D3Cold */
 		#define E1000_CTRL_ADVD3WUC 0x00100000
-- 
1.9.1

